type Query {
  station(id: ID!): Station
  stationByGroupId(groupId: ID!): Station
  nearbyStations(latitude: Float!, longitude: Float!, limit: Int = 1): [Station]
  stationsByLineId(lineId: ID!): [Station]
  stationsByName(name: String!): [Station]
  random: Station
  pathfinder(srcGroupId: ID!, dstGroupId: ID!): [FoundPath]
}

type StationNumber {
  lineSymbol: String
  lineSymbolColor: String
  stationNumber: String
}

enum StopCondition {
  ALL
  NOT
  PARTIAL
  WEEKDAY
  HOLIDAY
}

type Station {
  id: Int
  address: String
  distance: Float
  latitude: Float
  longitude: Float
  lines: [Line]
  currentLine: Line
  openYmd: String
  postalCode: String
  prefId: Int
  groupId: Int
  name: String
  nameK: String
  nameR: String
  nameZh: String
  nameKo: String
  trainTypes: [TrainType]
  pass: Boolean
  stopCondition: StopCondition
  stationNumbers: [StationNumber]
  threeLetterCode: String
}

type StationOnly {
  id: Int
  address: String
  distance: Float
  latitude: Float
  longitude: Float
  openYmd: String
  postalCode: String
  prefId: Int
  groupId: Int
  name: String
  nameK: String
  nameR: String
  nameZh: String
  nameKo: String
}

enum BoundDirection {
  INBOUND
  OUTBOUND
}

type FoundPath {
  line: Line
  stations: [StationOnly]
  bound: BoundDirection
}
